# This template describes the KnowEnG development stack, 
# which will mount in and operate on data from the host

# Ingress rules assign a hostname/path to expose particular ports to the public internet
# NOTE: "Host" header must match in order to be routed
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nest-ingress
spec:
  rules:
  - http:
      # Define all paths served by our app to generate an nginx configuration
      paths:
      - path: /
        backend:
          serviceName: nest
          servicePort: 80
      - path: /static/
        backend:
          serviceName: nest
          servicePort: 80
      - path: /static/img/
        backend:
          serviceName: nest
          servicePort: 80
      - path: /static/node_modules/
        backend:
          serviceName: nest
          servicePort: 80
      - path: /static/dist/
        backend:
          serviceName: nest
          servicePort: 80
      - path: /static/css/knoweng/
        backend:
          serviceName: nest
          servicePort: 80
      - path: /static/css/mmbdb/
        backend:
          serviceName: nest
          servicePort: 80
      - path: /api/
        backend:
          serviceName: nest
          servicePort: 80
---
# Services assigns a static IP for our containers to expose particular ports to all Pods in the cluster
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: nest
  name: nest
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
    # NOTE: This redis instance is currently not being used
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: 6379
  # Selector determines which Pods should be used by this Service
  selector:
    k8s-app: nest
---
# Deployments (and ReplicaSets and ReplicationControllers) are responsible for keeping
# your Pods running. Pods are containers that share 
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: nest
  name: nest
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: nest
  # This template describes the Pods that will be created/managed by this Deployment
  template:
    metadata:
      labels:
        k8s-app: nest
    spec:
      # Containers within the same Pod can access each others' ports on "localhost"
      containers:
        # postgres_i
      - image: postgres:9.6.2
        imagePullPolicy: Always
        name: postgres
        env:
        - name: PGDATA
          value: "/data/db/postgres"
        - name: POSTGRES_USER
          value: "nest"
        - name: POSTGRES_PASSWORD
          value: "GARBAGESECRET"
        volumeMounts:
        - name: pgdb
          mountPath: "/data/db"
        ports:
        - containerPort: 5432
          protocol: TCP

        # nest_flask_i
      - image: bodom0015/nest:flask
        imagePullPolicy: Always
        name: flask
        command: [ "bash" ]
        args: [ "-c", "while ! nc -z localhost 5432; do echo 'Waiting for postgres...'; sleep 10s; done && sleep 20s && ./entrypoint.sh" ]
        ports:
        - containerPort: 80
          protocol: TCP
        env:
        - name: PROJECT_ENV
          value: "knoweng"
        - name: NEST_RUNLEVEL
          value: "development"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: POSTGRES_PASSWORD
          value: "GARBAGESECRET"
        - name: REDIS_HOST
          value: "localhost"
        - name: AWS_SHARED_MNT_PATH
          value: "/home/ubuntu"
        volumeMounts:
        - name: userfiles
          mountPath: "/userfiles"

        # redis_i
      - image: redis:3.0.3
        imagePullPolicy: Always
        name: redis
        ports:
        - containerPort: 6379
          protocol: TCP

        # nest_jobs_i
      - image: bodom0015/nest:jobs
        imagePullPolicy: Always
        name: jobs
        command: [ "bash" ]
        args: [ "-c", "while ! nc -z localhost 80; do echo 'Waiting for flask...'; sleep 10s; done && sleep 10s && python -m nest_py.knoweng.jobs.worker_app" ]
        #securityContext:
          #runAsUser: 0   # DOCKER_UID
          #fsGroup: 999   # DOCKER_GID
        env:
        - name: PROJECT_ENV
          value: "knoweng"
        - name: REDIS_HOST
          value: "localhost"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: AWS_SHARED_MNT_PATH
          value: "/home/ubuntu"
        - name: EXEC_MODE
          value: "kubernetes"
        - name: AWS_REDIS_HOST
          value: "knowredis.knoweng.org"
        - name: AWS_REDIS_PASS
          value: "KnowEnG"
        volumeMounts:
        - name: userfiles
          mountPath: "/userfiles"
        - name: networks
          mountPath: "/networks"

    # This YAML assumes that the nest source code has been cloned into /home/ubuntu/nest
      volumes:
      - name: pgdb
        hostPath:
          path: "/home/ubuntu/data/db"
      - name: userfiles
        hostPath:
          path: "/home/ubuntu/userfiles"
      - name: networks
        hostPath:
          path: "/home/ubuntu/networks"
